definitions:
  dto.AuthorizeUserDto:
    properties:
      email:
        maxLength: 64
        minLength: 6
        type: string
      password:
        maxLength: 64
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.ChangeUserPasswordDto:
    properties:
      new_password:
        maxLength: 64
        minLength: 6
        type: string
      old_password:
        maxLength: 64
        minLength: 6
        type: string
    required:
    - new_password
    - old_password
    type: object
  dto.CreateUserDto:
    properties:
      email:
        maxLength: 64
        minLength: 6
        type: string
      password:
        maxLength: 64
        minLength: 6
        type: string
      username:
        maxLength: 32
        minLength: 6
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.GetUserDto:
    properties:
      created_at:
        type: string
      email:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.UpdateUserDto:
    properties:
      email:
        maxLength: 64
        minLength: 6
        type: string
      password:
        type: string
      updated_at:
        description: sets in service automatically
        type: string
      username:
        maxLength: 32
        minLength: 6
        type: string
    type: object
  exceptions.Error_:
    properties:
      message:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Authorizes user and returns JWT
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.AuthorizeUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/exceptions.Error_'
      tags:
      - auth
  /auth/changePassword:
    post:
      consumes:
      - application/json
      description: Changes user password and makes current token invalid
      parameters:
      - description: User passwords
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeUserPasswordDto'
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/exceptions.Error_'
      tags:
      - auth
  /users:
    post:
      consumes:
      - application/json
      description: Creates new user and returns it
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GetUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/exceptions.Error_'
      tags:
      - user
  /users/{username}:
    get:
      description: Returns user profile by username (requires JWT in "Bearer" header)
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/exceptions.Error_'
      tags:
      - user
  /users/me:
    get:
      description: Returns user profile (requires JWT in "Bearer" header)
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/exceptions.Error_'
      tags:
      - user
    patch:
      description: Updates user profile and returns it (requires JWT in "Bearer" header)
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDto'
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exceptions.Error_'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/exceptions.Error_'
      tags:
      - user
swagger: "2.0"
